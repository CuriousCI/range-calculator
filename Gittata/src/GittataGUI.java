
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Ionut Cicio
 */
public class GittataGUI extends javax.swing.JFrame implements ActionListener {

    private static final long serialVersionUID = 6004492171231764400L;
    Dimension screenSize;
    Timer timer;

    /**
     * Creates new form GittataGUI
     */
    public GittataGUI() {
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        timer = new Timer(1, this);
        timer.setInitialDelay(100);
        timer.start();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        container = new javax.swing.JPanel();
        dataManipulation = new javax.swing.JPanel();
        speedField = new javax.swing.JTextField();
        accelerationField = new javax.swing.JTextField();
        heightField = new javax.swing.JTextField();
        resultCalculator = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();
        dataVisualization = new javax.swing.JPanel();
        graphic = new javax.swing.JPanel();
        resultPanel = new javax.swing.JScrollPane();
        resultsArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(screenSize.width / 2 - 710 / 2, screenSize.height / 2 - 500 / 2);
        setResizable(false);
        setSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        container.setBackground(new java.awt.Color(0, 0, 0));
        container.setForeground(new java.awt.Color(150, 150, 150));

        dataManipulation.setBackground(container.getBackground());
        dataManipulation.setForeground(container.getForeground());
        java.awt.GridBagLayout dataManipulationLayout = new java.awt.GridBagLayout();
        dataManipulationLayout.columnWidths = new int[] { 0 };
        dataManipulationLayout.rowHeights = new int[] { 0, 40, 0, 40, 0, 40, 0, 40, 0 };
        dataManipulation.setLayout(dataManipulationLayout);

        speedField.setBackground(new java.awt.Color(45, 45, 45));
        speedField.setFont(new java.awt.Font("Andalus", 0, 16)); // NOI18N
        speedField.setForeground(dataManipulation.getForeground());
        speedField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        speedField.setText("velocit√†");
        speedField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 12, 1, 12));
        speedField.setCaretColor(new java.awt.Color(255, 255, 255));
        speedField.setOpaque(false);
        speedField.setPreferredSize(new java.awt.Dimension(150, 50));
        speedField.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        speedField.setSelectionColor(new java.awt.Color(200, 200, 200));
        speedField.setUI(new CustomTextField());
        speedField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                speedFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                speedFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        dataManipulation.add(speedField, gridBagConstraints);

        accelerationField.setBackground(new java.awt.Color(45, 45, 45));
        accelerationField.setFont(new java.awt.Font("Andalus", 0, 16)); // NOI18N
        accelerationField.setForeground(dataManipulation.getForeground());
        accelerationField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        accelerationField.setText("accelerazione");
        accelerationField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 12, 1, 12));
        accelerationField.setCaretColor(new java.awt.Color(255, 255, 255));
        accelerationField.setOpaque(false);
        accelerationField.setUI(new CustomTextField());
        accelerationField.setPreferredSize(new java.awt.Dimension(150, 50));
        accelerationField.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        accelerationField.setSelectionColor(new java.awt.Color(200, 200, 200));
        accelerationField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                accelerationFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                accelerationFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        dataManipulation.add(accelerationField, gridBagConstraints);

        heightField.setBackground(new java.awt.Color(45, 45, 45));
        heightField.setFont(new java.awt.Font("Andalus", 0, 16)); // NOI18N
        heightField.setForeground(dataManipulation.getForeground());
        heightField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        heightField.setText("altezza");
        heightField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 12, 1, 12));
        heightField.setCaretColor(new java.awt.Color(255, 255, 255));
        heightField.setOpaque(false);
        heightField.setUI(new CustomTextField());
        heightField.setPreferredSize(new java.awt.Dimension(150, 50));
        heightField.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        heightField.setSelectionColor(new java.awt.Color(200, 200, 200));
        heightField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                heightFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                heightFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        dataManipulation.add(heightField, gridBagConstraints);

        resultCalculator.setBackground(new java.awt.Color(45, 45, 45));
        resultCalculator.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        resultCalculator.setForeground(dataManipulation.getForeground());
        resultCalculator.setText("calcola G");
        resultCalculator.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        resultCalculator.setContentAreaFilled(false);
        resultCalculator.setPreferredSize(new java.awt.Dimension(150, 50));
        resultCalculator.setUI(new CustomButton());
        resultCalculator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resultCalculatorMousePressed(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultCalculatorMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        dataManipulation.add(resultCalculator, gridBagConstraints);

        resultLabel.setBackground(new java.awt.Color(45, 45, 45));
        resultLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        resultLabel.setForeground(dataManipulation.getForeground());
        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        resultLabel.setPreferredSize(new java.awt.Dimension(150, 50));
        resultLabel.setUI(new CustomLabel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        dataManipulation.add(resultLabel, gridBagConstraints);

        dataVisualization.setBackground(container.getBackground());
        dataVisualization.setForeground(container.getForeground());

        graphic.setBackground(new java.awt.Color(255, 255, 255));
        graphic.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        graphic.setOpaque(false);
        graphic.setUI(new DiagramPanel());

        javax.swing.GroupLayout graphicLayout = new javax.swing.GroupLayout(graphic);
        graphic.setLayout(graphicLayout);
        graphicLayout.setHorizontalGroup(graphicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 440, Short.MAX_VALUE));
        graphicLayout.setVerticalGroup(graphicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE));

        resultPanel.setBackground(new java.awt.Color(45, 45, 45));
        resultPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        resultPanel.setForeground(new java.awt.Color(45, 45, 45));
        resultPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        resultPanel.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        resultPanel.setHorizontalScrollBar(null);
        resultPanel.setOpaque(false);

        resultsArea.setEditable(false);
        resultsArea.setBackground(new java.awt.Color(0, 0, 0));
        resultsArea.setColumns(20);
        resultsArea.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        resultsArea.setForeground(container.getForeground());
        resultsArea.setRows(5);
        resultsArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        resultsArea.setOpaque(false);
        resultsArea.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        resultsArea.setUI(new CustomTextArea());
        resultsArea.setSelectionColor(new java.awt.Color(200, 200, 200));
        resultPanel.setViewportView(resultsArea);

        getContentPane().add(container);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resultCalculatorMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_resultCalculatorMousePressed
        CustomButton buttonUI = (CustomButton) resultCalculator.getUI();
        buttonUI.target = buttonUI.numberOfFrames;

        if (Float.valueOf(heightField.getText()) > 170) {
            resultsArea.setText("l'altezza deve essere minore o uguale a 170");
        } else if (!heightField.getText().equals("altezza") && !heightField.getText().equals("")
                && !accelerationField.getText().equals("accelerazione") && !accelerationField.getText().equals("")
                && !speedField.getText().equals("velocit√†") && !speedField.getText().equals("")) {
            DiagramPanel temp = (DiagramPanel) graphic.getUI();
            temp.setValues(Float.valueOf(heightField.getText()), Float.valueOf(heightField.getText()),
                    Float.valueOf(accelerationField.getText()), Float.valueOf(speedField.getText()));
            temp.isDrawable = true;
            resultLabel.setText(calculateResult());

            resultsArea.setText(getCalculations());
        }
    }// GEN-LAST:event_resultCalculatorMousePressed

    private void resultCalculatorMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_resultCalculatorMouseReleased
        CustomButton buttonUI = (CustomButton) resultCalculator.getUI();
        buttonUI.target = 0;
    }// GEN-LAST:event_resultCalculatorMouseReleased

    private void heightFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_heightFocusGained
        if (heightField.getText().equals("altezza")) {
            heightField.setText("");
        }
    }// GEN-LAST:event_heightFocusGained

    private void accelerationFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_accelerationFocusGained
        if (accelerationField.getText().equals("accelerazione")) {
            accelerationField.setText("");
        }
    }// GEN-LAST:event_accelerationFocusGained

    private void speedFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_speedFocusGained
        if (speedField.getText().equals("velocit√†")) {
            speedField.setText("");
        }
    }// GEN-LAST:event_speedFocusGained

    private void heightFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_heightFocusLost
        if (heightField.getText().equals("")) {
            heightField.setText("altezza");
        }
    }// GEN-LAST:event_heightFocusLost

    private void accelerationFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_accelerationFocusLost
        if (accelerationField.getText().equals("")) {
            accelerationField.setText("accelerazione");
        }
    }// GEN-LAST:event_accelerationFocusLost

    private void speedFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_speedFocusLost
        if (speedField.getText().equals("")) {
            speedField.setText("velocit√†");
        }
    }// GEN-LAST:event_speedFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GittataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GittataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GittataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GittataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GittataGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accelerationField;
    private javax.swing.JPanel container;
    private javax.swing.JPanel dataManipulation;
    private javax.swing.JPanel dataVisualization;
    private javax.swing.JPanel graphic;
    private javax.swing.JTextField heightField;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JButton resultCalculator;
    private javax.swing.JScrollPane resultPanel;
    private javax.swing.JTextArea resultsArea;
    private javax.swing.JTextField speedField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        repaint();
    }

    public String calculateResult() {
        float launchingSpeed = Float.valueOf(speedField.getText());
        float gravitationalAcceleration = Float.valueOf(accelerationField.getText());
        float launchingHeight = Float.valueOf(heightField.getText());

        float range = (float) (launchingSpeed * Math.sqrt((2 * launchingHeight) / gravitationalAcceleration));

        return String.valueOf(range);
    }

    public String getCalculations() {
        float launchingSpeed = Float.valueOf(speedField.getText());
        float gravitationalAcceleration = Float.valueOf(accelerationField.getText());
        float launchingHeight = Float.valueOf(heightField.getText());

        // float G = (float)(V0 * Math.sqrt((2 * h) / g));

        String calculations = " V0 * sqrt((2*h) / g) =\n";
        calculations += " = " + String.valueOf(launchingSpeed) + " * sqrt((2*" + String.valueOf(launchingHeight)
                + ") / " + String.valueOf(gravitationalAcceleration) + ") =\n";
        calculations += " = " + String.valueOf(launchingSpeed) + " * sqrt(" + String.valueOf(2 * launchingHeight)
                + " / " + String.valueOf(gravitationalAcceleration) + ") =\n";
        calculations += " = " + String.valueOf(launchingSpeed) + " * sqrt("
                + String.valueOf((2 * launchingHeight) / gravitationalAcceleration) + ") =\n";
        calculations += " = " + String.valueOf(launchingSpeed) + " * "
                + String.valueOf(Math.sqrt((2 * launchingHeight) / gravitationalAcceleration)) + " =\n";
        calculations += " = "
                + String.valueOf(launchingSpeed * Math.sqrt((2 * launchingHeight) / gravitationalAcceleration)) + "\n";
        return calculations;
    }
}
